package {{package}};

import {{modelPackage}}.*;

import com.wordnik.swagger.annotations.*;
import com.sun.jersey.multipart.FormDataParam;

{{#imports}}import {{import}};
{{/imports}}

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.ServiceLoader;
import {{package}}.NotFoundException;

import java.io.InputStream;

import com.sun.jersey.core.header.FormDataContentDisposition;
import com.sun.jersey.multipart.FormDataParam;

import javax.ws.rs.core.Response;
import javax.ws.rs.*;

@Path("/{{baseName}}")
@Api(value = "/{{baseName}}", description = "the {{baseName}} API")
{{#operations}}
public class {{classname}} {
	
	//load instance via ServiceLoader
//	static {{classname}}Interface instance ;=new {{classname}}STUB();
	static {{classname}}Interface instance ;//=new {{classname}}Impl();
	static  {
		    ServiceLoader<{{classname}}Interface> loader = ServiceLoader.load({{classname}}Interface.class);
		    List<{{classname}}Interface> output = new ArrayList<{{classname}}Interface>();
		    Iterator<{{classname}}Interface> itr = loader.iterator();
		    {{classname}}Interface stub=null;
		    while(itr.hasNext()) {
		    	
		    	try{
			    	{{classname}}Interface next =itr.next();
			    	System.out.println(next.getClass().getName());
			    	if(next.getClass().getName().endsWith("STUB")){
			    		stub=next;
			    	}
			    	else{
			    		instance=next;
			    	}
		    	}catch(Throwable t){
		    		t.printStackTrace();
		    	}
		    }
		    if (instance==null)instance=stub;
		  }
	
	
	
	public {{classname}}Interface getInstance() {
		return instance;
	}
	public void setInstance({{classname}}Interface instance) {
		this.instance = instance;
	}

  {{#operation}}
  @{{httpMethod}}
  {{#subresourceOperation}}@Path("{{path}}"){{/subresourceOperation}}
  {{#hasConsumes}}@Consumes({ {{#consumes}}"{{mediaType}}"{{#hasMore}}, {{/hasMore}}{{/consumes}} }){{/hasConsumes}}
  {{#hasProduces}}@Produces({ {{#produces}}"{{mediaType}}"{{#hasMore}}, {{/hasMore}}{{/produces}} }){{/hasProduces}}
  @ApiOperation(value = "{{{summary}}}", notes = "{{{notes}}}", response = {{{returnType}}}.class{{#returnContainer}}, responseContainer = "{{{returnContainer}}}"{{/returnContainer}})
  @ApiResponses(value = { {{#responses}}
    @ApiResponse(code = {{{code}}}, message = "{{{message}}}"){{#hasMore}},
    {{/hasMore}}{{/responses}} })

  public Response {{nickname}}({{#allParams}}{{>queryParams}}{{>pathParams}}{{>headerParams}}{{>bodyParams}}{{>formParams}}{{#hasMore}},
    {{/hasMore}}{{/allParams}})
      throws NotFoundException {
	  Response response=null;
	  try{
		  
		  response=instance.{{nickname}}Impl({{#allParams}}{{>callMethodParams}}{{#hasMore}},{{/hasMore}}{{/allParams}});
	  }catch(Exception e){
		e.printStackTrace();
		response = Response.status(500).entity(e.getMessage()).build();
	  }
      return response;
   }

  {{/operation}}
}
{{/operations}}
